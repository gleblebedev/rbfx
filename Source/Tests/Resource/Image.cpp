//
// Copyright (c) 2021 the rbfx project.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

#pragma once

#include "../CommonUtils.h"
#include "Urho3D/IO/MemoryBuffer.h"

#include <Urho3D/Resource/Image.h>

namespace Tests
{
namespace
{
uint8_t DXT1[256]{68,  68,  83,  32,  124, 0,   0,   0,   7,   16,  8,   0,   16,  0,   0,   0,   16,  0,   0,   0,
                  128, 0,   0,   0,   0,   0,   0,   0,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
                  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
                  85,  86,  69,  82,  0,   0,   0,   0,   78,  86,  84,  84,  2,   1,   2,   0,   32,  0,   0,   0,
                  4,   0,   0,   0,   68,  88,  84,  49,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
                  0,   0,   0,   0,   0,   0,   0,   0,   0,   16,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
                  0,   0,   0,   0,   0,   0,   0,   0,   51,  10,  33,  10,  170, 170, 170, 170, 31,  159, 17,  47,
                  170, 170, 170, 170, 59,  123, 56,  67,  170, 170, 170, 170, 223, 30,  202, 30,  170, 170, 170, 170,
                  171, 177, 160, 9,   170, 170, 170, 170, 32,  252, 32,  220, 170, 170, 170, 170, 32,  139, 32,  3,
                  170, 170, 170, 170, 130, 157, 128, 133, 170, 170, 170, 170, 83,  89,  69,  17,  170, 170, 170, 170,
                  98,  123, 97,  99,  170, 170, 170, 170, 14,  254, 0,   62,  170, 170, 170, 170, 110, 7,   96,  7,
                  170, 170, 170, 170, 247, 223, 207, 15,  170, 170, 170, 170, 70,  251, 64,  35,  170, 170, 170, 170,
                  31,  92,  30,  36,  170, 170, 170, 170, 5,   252, 225, 155, 170, 170, 170, 170};

uint8_t DXT3[384]{
    68,  68,  83,  32,  124, 0,   0,   0,   7,   16,  8,   0,   16,  0,   0,   0,   16,  0,   0,   0,   0,   1,   0,
    0,   0,   0,   0,   0,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   85,  86,  69,  82,  0,   0,   0,   0,   78,
    86,  84,  84,  2,   1,   2,   0,   32,  0,   0,   0,   4,   0,   0,   0,   68,  88,  84,  51,  0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   16,  0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   34,  34,  34,  34,  34,  34,  34,  34,  45,  10,
    13,  10,  170, 170, 170, 170, 85,  85,  85,  85,  85,  85,  85,  85,  219, 125, 186, 119, 255, 255, 255, 255, 170,
    170, 170, 170, 170, 170, 170, 170, 26,  108, 186, 98,  255, 255, 255, 255, 238, 238, 238, 238, 238, 238, 238, 238,
    88,  31,  216, 29,  170, 170, 170, 170, 51,  51,  51,  51,  51,  51,  51,  51,  168, 121, 167, 121, 255, 255, 255,
    255, 51,  51,  51,  51,  51,  51,  51,  51,  32,  244, 32,  236, 170, 170, 170, 170, 238, 238, 238, 238, 238, 238,
    238, 238, 0,   99,  32,  91,  255, 255, 255, 255, 85,  85,  85,  85,  85,  85,  85,  85,  130, 149, 129, 149, 170,
    170, 170, 170, 68,  68,  68,  68,  68,  68,  68,  68,  78,  65,  79,  57,  170, 170, 170, 170, 204, 204, 204, 204,
    204, 204, 204, 204, 1,   116, 2,   115, 255, 255, 255, 255, 238, 238, 238, 238, 238, 238, 238, 238, 9,   190, 234,
    189, 170, 170, 170, 170, 34,  34,  34,  34,  34,  34,  34,  34,  105, 7,   73,  7,   170, 170, 170, 170, 187, 187,
    187, 187, 187, 187, 187, 187, 244, 159, 212, 151, 170, 170, 170, 170, 68,  68,  68,  68,  68,  68,  68,  68,  34,
    180, 197, 178, 255, 255, 255, 255, 136, 136, 136, 136, 136, 136, 136, 136, 31,  76,  254, 67,  170, 170, 170, 170,
    17,  17,  17,  17,  17,  17,  17,  17,  3,   220, 228, 219, 255, 255, 255, 255};

uint8_t DXT5[384]{
    68,  68,  83,  32,  124, 0,   0,   0,   7,   16,  8,   0,   16,  0,   0,   0,   16,  0,   0,   0,   0,   1,   0,
    0,   0,   0,   0,   0,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   85,  86,  69,  82,  0,   0,   0,   0,   78,
    86,  84,  84,  2,   1,   2,   0,   32,  0,   0,   0,   4,   0,   0,   0,   68,  88,  84,  53,  0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   16,  0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   26,  26,  0,   0,   0,   0,   0,   0,   45,  10,
    13,  10,  170, 170, 170, 170, 93,  93,  0,   0,   0,   0,   0,   0,   219, 125, 186, 119, 255, 255, 255, 255, 173,
    173, 0,   0,   0,   0,   0,   0,   26,  108, 186, 98,  255, 255, 255, 255, 245, 245, 0,   0,   0,   0,   0,   0,
    88,  31,  216, 29,  170, 170, 170, 170, 43,  43,  0,   0,   0,   0,   0,   0,   168, 121, 167, 121, 255, 255, 255,
    255, 55,  55,  0,   0,   0,   0,   0,   0,   32,  244, 32,  236, 170, 170, 170, 170, 236, 236, 0,   0,   0,   0,
    0,   0,   0,   99,  32,  91,  255, 255, 255, 255, 83,  83,  0,   0,   0,   0,   0,   0,   130, 149, 129, 149, 170,
    170, 170, 170, 74,  74,  0,   0,   0,   0,   0,   0,   78,  65,  79,  57,  170, 170, 170, 170, 207, 207, 0,   0,
    0,   0,   0,   0,   1,   116, 2,   115, 255, 255, 255, 255, 244, 244, 0,   0,   0,   0,   0,   0,   9,   190, 234,
    189, 170, 170, 170, 170, 30,  30,  0,   0,   0,   0,   0,   0,   105, 7,   73,  7,   170, 170, 170, 170, 181, 181,
    0,   0,   0,   0,   0,   0,   244, 159, 212, 151, 170, 170, 170, 170, 70,  70,  0,   0,   0,   0,   0,   0,   34,
    180, 197, 178, 255, 255, 255, 255, 134, 134, 0,   0,   0,   0,   0,   0,   31,  76,  254, 67,  170, 170, 170, 170,
    16,  16,  0,   0,   0,   0,   0,   0,   3,   220, 228, 219, 255, 255, 255, 255};

uint8_t ETC1[256]{
    68,  68,  83,  32, 124, 0,   0, 0, 7,   16,  8,   0, 16,  0,   0,  0,  16,  0,   0,   0, 128, 0,   0,  0,
    0,   0,   0,   0,  1,   0,   0, 0, 0,   0,   0,   0, 0,   0,   0,  0,  0,   0,   0,   0, 0,   0,   0,  0,
    0,   0,   0,   0,  0,   0,   0, 0, 0,   0,   0,   0, 85,  86,  69, 82, 0,   0,   0,   0, 78,  86,  84, 84,
    2,   1,   2,   0,  32,  0,   0, 0, 4,   0,   0,   0, 69,  84,  67, 49, 0,   0,   0,   0, 0,   0,   0,  0,
    0,   0,   0,   0,  0,   0,   0, 0, 0,   0,   0,   0, 0,   16,  0,  0,  0,   0,   0,   0, 0,   0,   0,  0,
    0,   0,   0,   0,  0,   0,   0, 0, 8,   64,  104, 2, 0,   0,   0,  0,  112, 224, 208, 2, 255, 255, 0,  0,
    96,  96,  208, 2,  0,   0,   0, 0, 24,  216, 192, 2, 255, 255, 0,  0,  120, 48,  56,  2, 0,   0,   0,  0,
    240, 128, 0,   2,  255, 255, 0, 0, 88,  96,  0,   2, 0,   0,   0,  0,  144, 176, 16,  2, 255, 255, 0,  0,
    64,  40,  112, 2,  0,   0,   0, 0, 112, 104, 16,  2, 255, 255, 0,  0,  184, 192, 72,  2, 255, 255, 0,  0,
    0,   232, 72,  2,  0,   0,   0, 0, 153, 255, 170, 0, 255, 255, 0,  0,  176, 104, 32,  2, 255, 255, 0,  0,
    72,  128, 248, 2,  255, 255, 0, 0, 216, 120, 32,  2, 0,   0,   0,  0};

uint8_t ETC2[256]{68,  68,  83,  32,  124, 0,   0,   0,   7,   16,  8,   0,   16,  0,   0,   0,   16,  0,   0,   0,
                  128, 0,   0,   0,   0,   0,   0,   0,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
                  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
                  85,  86,  69,  82,  0,   0,   0,   0,   78,  86,  84,  84,  2,   1,   2,   0,   32,  0,   0,   0,
                  4,   0,   0,   0,   69,  84,  67,  50,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
                  0,   0,   0,   0,   0,   0,   0,   0,   0,   16,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
                  0,   0,   0,   0,   0,   0,   0,   0,   132, 68,  249, 134, 68,  208, 72,  155, 59,  99,  242, 187,
                  227, 171, 188, 117, 50,  101, 242, 182, 103, 163, 44,  181, 141, 91,  20,  142, 219, 136, 219, 49,
                  62,  52,  235, 191, 54,  123, 230, 143, 123, 134, 4,   123, 134, 7,   144, 128, 46,  100, 4,   47,
                  100, 2,   236, 128, 73,  50,  5,   202, 176, 28,  150, 67,  32,  40,  250, 162, 42,  234, 5,   29,
                  58,  108, 5,   187, 108, 35,  141, 131, 95,  64,  21,  223, 194, 157, 248, 19,  1,   108, 21,  130,
                  238, 152, 29,  147, 153, 255, 170, 0,   255, 255, 0,   0,   90,  104, 12,  91,  106, 69,  173, 8,
                  35,  1,   251, 163, 129, 242, 48,  63,  110, 126, 12,  111, 128, 70,  239, 200};

uint8_t PTC2[192]{
    68,  68,  83,  32,  124, 0,  0,   0,   7,   16,  8,   0,   16,  0,  0,   0,   16,  0,   0,   0,   64,  0,  0,   0,
    0,   0,   0,   0,   1,   0,  0,   0,   0,   0,   0,   0,   0,   0,  0,   0,   0,   0,   0,   0,   0,   0,  0,   0,
    0,   0,   0,   0,   0,   0,  0,   0,   0,   0,   0,   0,   85,  86, 69,  82,  0,   0,   0,   0,   78,  86, 84,  84,
    2,   1,   2,   0,   32,  0,  0,   0,   4,   0,   0,   0,   80,  84, 67,  50,  0,   0,   0,   0,   0,   0,  0,   0,
    0,   0,   0,   0,   0,   0,  0,   0,   0,   0,   0,   0,   0,   16, 0,   0,   0,   0,   0,   0,   0,   0,  0,   0,
    0,   0,   0,   0,   0,   0,  0,   0,   240, 240, 240, 240, 40,  0,  204, 40,  241, 244, 240, 176, 5,   23, 112, 31,
    255, 255, 255, 255, 130, 35, 152, 146, 15,  15,  15,  15,  192, 58, 96,  161, 240, 240, 240, 240, 8,   52, 96,  117,
    15,  15,  15,  15,  112, 43, 251, 90,  15,  15,  31,  15,  245, 0,  175, 239, 15,  15,  15,  15,  114, 15, 127, 66};

uint8_t PTC4[256]{68,  68,  83,  32,  124, 0,   0,   0,   7,   16,  8,   0,   16,  0,   0,   0,   16,  0,   0,   0,
                  128, 0,   0,   0,   0,   0,   0,   0,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
                  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
                  85,  86,  69,  82,  0,   0,   0,   0,   78,  86,  84,  84,  2,   1,   2,   0,   32,  0,   0,   0,
                  4,   0,   0,   0,   80,  84,  67,  52,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
                  0,   0,   0,   0,   0,   0,   0,   0,   0,   16,  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
                  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   39,  0,   218, 54,  80,  80,  80,  80,
                  6,   22,  112, 31,  255, 255, 255, 255, 115, 52,  220, 56,  255, 255, 255, 255, 161, 161, 112, 31,
                  0,   0,   0,   0,   25,  34,  231, 103, 255, 255, 255, 255, 101, 21,  250, 91,  81,  155, 150, 106,
                  128, 105, 192, 172, 0,   0,   0,   0,   99,  45,  207, 53,  255, 255, 255, 255, 97,  119, 93,  101,
                  0,   0,   0,   0,   97,  118, 160, 29,  255, 255, 255, 255, 132, 36,  185, 131, 0,   1,   2,   1,
                  192, 42,  231, 32,  0,   0,   0,   0,   143, 235, 188, 32,  255, 255, 255, 255, 97,  11,  111, 69,
                  255, 255, 255, 255, 83,  40,  242, 0,   0,   0,   0,   0,   131, 15,  235, 117};

void TestTexture(SharedPtr<Context> context, unsigned char* data, size_t size, CompressedFormat format)
{
    auto image = MakeShared<Image>(context);
    MemoryBuffer dds(data, size);
    REQUIRE(image->BeginLoad(dds));
    REQUIRE(image->GetCompressedFormat() == format);
    auto decompressed = image->GetDecompressedImageLevel(0);
    REQUIRE(decompressed->GetWidth() == 16);
    REQUIRE(decompressed->GetHeight() == 16);
}

} // namespace
TEST_CASE("Image Decompression")
{
    auto context = Tests::CreateCompleteTestContext();
    TestTexture(context, DXT1, sizeof(DXT1), CF_DXT1);
    TestTexture(context, DXT3, sizeof(DXT3), CF_DXT3);
    TestTexture(context, DXT5, sizeof(DXT5), CF_DXT5);
    TestTexture(context, ETC1, sizeof(ETC1), CF_ETC1);
    TestTexture(context, ETC2, sizeof(ETC2), CF_ETC2_RGB);
    TestTexture(context, PTC2, sizeof(PTC2), CF_PVRTC_RGBA_2BPP);
    TestTexture(context, PTC4, sizeof(PTC4), CF_PVRTC_RGBA_4BPP);
}
} // namespace Tests
