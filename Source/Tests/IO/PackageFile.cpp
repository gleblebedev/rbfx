#include <Urho3D/Core/Context.h>
#include <Urho3D/IO/File.h>
#include <Urho3D/IO/FileSystem.h>
#include <Urho3D/IO/MemoryBuffer.h>
#include <Urho3D/IO/PackageBuilder.h>
#include <Urho3D/IO/PackageFile.h>

#include <catch2/catch_amalgamated.hpp>

using namespace Urho3D;

namespace
{
EncryptionKey TestEncryptionKey("pIkKsSTm8reeZU8sw6h6PrpiCdGFuqbay1Vs14pkgE8=");

SharedPtr<Context> CreateTestContext()
{
    auto context = MakeShared<Context>();
    context->RegisterSubsystem<FileSystem>();
    return context;
}

bool AppendMessage(PackageBuilder& builder, const ea::string& entryName, const ea::string& value)
{
    ByteVector message(value.begin(), value.end());
    if (!builder.Append("EntryName", message))
        return false;
    return true;
}

bool RetrieveMessage(Context* context, PackageFile* packageFile, const ea::string& fileName, ea::string* value)
{
    SharedPtr<File> packageContent = MakeShared<File>(context, packageFile, fileName, &TestEncryptionKey);
    auto* entry = packageFile->GetEntry(fileName);
    value->resize(entry->size_);
    if (packageContent->Read(value->data(), entry->size_) != entry->size_)
        return false;
    return true;
}


struct TmpFile
{
    TmpFile(Context* context)
    {
        fileSystem_ = context->GetSubsystem<FileSystem>();
        auto tmpDir = fileSystem_->GetTemporaryDir();
        fileName_ = tmpDir + "/tmp";
    }

    ~TmpFile()
    {
        if (fileSystem_->Exists(fileName_))
            fileSystem_->Delete(fileName_);
    }

    FileSystem* fileSystem_;
    ea::string fileName_;
};

unsigned char ULZ4Content[] = {0x55, 0x4C, 0x5A, 0x34, 0x3, 0x0, 0x0, 0x0, 0xFF, 0xAC, 0x14, 0x73, 0x4C, 0x6F, 0x6E,
                               0x67, 0x4D, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x0, 0x59, 0x0, 0x0, 0x0, 0xBA, 0x1, 0x0,
                               0x0, 0xAE, 0xBF, 0x69, 0xFD, 0x53, 0x68, 0x6F, 0x72, 0x74, 0x4D, 0x65, 0x73, 0x73, 0x61,
                               0x67, 0x65, 0x0, 0xFC, 0x1, 0x0, 0x0, 0x19, 0x0, 0x0, 0x0, 0x2D, 0xED, 0x70, 0xB0, 0x5A,
                               0x65, 0x72, 0x6F, 0x53, 0x69, 0x7A, 0x65, 0x4D, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x0,
                               0x1B, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xBA, 0x1, 0x9F, 0x1, 0xF2,
                               0x57, 0x4C, 0x6F, 0x72, 0x65, 0x6D, 0x20, 0x69, 0x70, 0x73, 0x75, 0x6D, 0x20, 0x64, 0x6F,
                               0x6C, 0x6F, 0x72, 0x20, 0x73, 0x69, 0x74, 0x20, 0x61, 0x6D, 0x65, 0x74, 0x2C, 0x20, 0x63,
                               0x6F, 0x6E, 0x73, 0x65, 0x63, 0x74, 0x65, 0x74, 0x75, 0x72, 0x20, 0x61, 0x64, 0x69, 0x70,
                               0x69, 0x73, 0x63, 0x69, 0x6E, 0x67, 0x20, 0x65, 0x6C, 0x69, 0x74, 0x2C, 0x20, 0x73, 0x65,
                               0x64, 0x20, 0x64, 0x6F, 0x20, 0x65, 0x69, 0x75, 0x73, 0x6D, 0x6F, 0x64, 0x20, 0x74, 0x65,
                               0x6D, 0x70, 0x6F, 0x72, 0x20, 0x69, 0x6E, 0x63, 0x69, 0x64, 0x69, 0x64, 0x75, 0x6E, 0x74,
                               0x20, 0x75, 0x74, 0x20, 0x6C, 0x61, 0x62, 0x6F, 0x72, 0x65, 0x20, 0x65, 0x74, 0x5B, 0x0,
                               0xF0, 0xD, 0x65, 0x20, 0x6D, 0x61, 0x67, 0x6E, 0x61, 0x20, 0x61, 0x6C, 0x69, 0x71, 0x75,
                               0x61, 0x2E, 0x55, 0x74, 0x20, 0x65, 0x6E, 0x69, 0x6D, 0x20, 0x61, 0x64, 0x20, 0x6D, 0x69,
                               0x9, 0x0, 0xF2, 0x1A, 0x76, 0x65, 0x6E, 0x69, 0x61, 0x6D, 0x2C, 0x20, 0x71, 0x75, 0x69,
                               0x73, 0x20, 0x6E, 0x6F, 0x73, 0x74, 0x72, 0x75, 0x64, 0x20, 0x65, 0x78, 0x65, 0x72, 0x63,
                               0x69, 0x74, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x75, 0x6C, 0x6C, 0x61, 0x6D, 0x63, 0x6F,
                               0x59, 0x0, 0x0, 0x25, 0x0, 0x30, 0x69, 0x73, 0x69, 0x69, 0x0, 0x1, 0x52, 0x0, 0xF2, 0x1,
                               0x69, 0x70, 0x20, 0x65, 0x78, 0x20, 0x65, 0x61, 0x20, 0x63, 0x6F, 0x6D, 0x6D, 0x6F, 0x64,
                               0x6F, 0xC0, 0x0, 0x60, 0x71, 0x75, 0x61, 0x74, 0x2E, 0x44, 0x52, 0x0, 0xA3, 0x61, 0x75,
                               0x74, 0x65, 0x20, 0x69, 0x72, 0x75, 0x72, 0x65, 0xEA, 0x0, 0xF0, 0x1, 0x69, 0x6E, 0x20,
                               0x72, 0x65, 0x70, 0x72, 0x65, 0x68, 0x65, 0x6E, 0x64, 0x65, 0x72, 0x69, 0x74, 0x11, 0x0,
                               0xB0, 0x76, 0x6F, 0x6C, 0x75, 0x70, 0x74, 0x61, 0x74, 0x65, 0x20, 0x76, 0xE8, 0x0, 0xA4,
                               0x20, 0x65, 0x73, 0x73, 0x65, 0x20, 0x63, 0x69, 0x6C, 0x6C, 0x20, 0x1, 0xD0, 0x65, 0x20,
                               0x65, 0x75, 0x20, 0x66, 0x75, 0x67, 0x69, 0x61, 0x74, 0x20, 0x6E, 0x90, 0x0, 0xF0, 0x3,
                               0x20, 0x70, 0x61, 0x72, 0x69, 0x61, 0x74, 0x75, 0x72, 0x2E, 0x45, 0x78, 0x63, 0x65, 0x70,
                               0x74, 0x65, 0x75, 0x44, 0x1, 0xF0, 0x4, 0x6E, 0x74, 0x20, 0x6F, 0x63, 0x63, 0x61, 0x65,
                               0x63, 0x61, 0x74, 0x20, 0x63, 0x75, 0x70, 0x69, 0x64, 0x61, 0x74, 0x31, 0x0, 0xA0, 0x6F,
                               0x6E, 0x20, 0x70, 0x72, 0x6F, 0x69, 0x64, 0x65, 0x6E, 0x43, 0x1, 0x21, 0x75, 0x6E, 0x74,
                               0x0, 0x50, 0x63, 0x75, 0x6C, 0x70, 0x61, 0xF6, 0x0, 0xE0, 0x20, 0x6F, 0x66, 0x66, 0x69,
                               0x63, 0x69, 0x61, 0x20, 0x64, 0x65, 0x73, 0x65, 0x72, 0x1E, 0x0, 0x30, 0x6D, 0x6F, 0x6C,
                               0x86, 0x0, 0x10, 0x61, 0x1F, 0x1, 0xF0, 0x0, 0x69, 0x64, 0x20, 0x65, 0x73, 0x74, 0x20,
                               0x6C, 0x61, 0x62, 0x6F, 0x72, 0x75, 0x6D, 0x2E, 0x19, 0x0, 0x1B, 0x0, 0xF0, 0xA, 0x54,
                               0x68, 0x65, 0x20, 0x73, 0x68, 0x6F, 0x72, 0x74, 0x20, 0x6D, 0x65, 0x73, 0x73, 0x61, 0x67,
                               0x65, 0x20, 0x63, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0x1F, 0x2, 0x0, 0x0};

unsigned char RLZ4Content[] = {0x52, 0x4C, 0x5A, 0x34, 0x3, 0x0, 0x0, 0x0, 0x5B, 0xD0, 0x75, 0xCC, 0x0, 0x0, 0x0, 0x0,
                               0xDA, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x19, 0x0, 0x1B, 0x0, 0xF0, 0xA, 0x54, 0x68,
                               0x65, 0x20, 0x73, 0x68, 0x6F, 0x72, 0x74, 0x20, 0x6D, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
                               0x20, 0x63, 0x6F, 0x6E, 0x74, 0x65, 0x6E, 0x74, 0xBA, 0x1, 0x9F, 0x1, 0xF2, 0x57, 0x4C,
                               0x6F, 0x72, 0x65, 0x6D, 0x20, 0x69, 0x70, 0x73, 0x75, 0x6D, 0x20, 0x64, 0x6F, 0x6C, 0x6F,
                               0x72, 0x20, 0x73, 0x69, 0x74, 0x20, 0x61, 0x6D, 0x65, 0x74, 0x2C, 0x20, 0x63, 0x6F, 0x6E,
                               0x73, 0x65, 0x63, 0x74, 0x65, 0x74, 0x75, 0x72, 0x20, 0x61, 0x64, 0x69, 0x70, 0x69, 0x73,
                               0x63, 0x69, 0x6E, 0x67, 0x20, 0x65, 0x6C, 0x69, 0x74, 0x2C, 0x20, 0x73, 0x65, 0x64, 0x20,
                               0x64, 0x6F, 0x20, 0x65, 0x69, 0x75, 0x73, 0x6D, 0x6F, 0x64, 0x20, 0x74, 0x65, 0x6D, 0x70,
                               0x6F, 0x72, 0x20, 0x69, 0x6E, 0x63, 0x69, 0x64, 0x69, 0x64, 0x75, 0x6E, 0x74, 0x20, 0x75,
                               0x74, 0x20, 0x6C, 0x61, 0x62, 0x6F, 0x72, 0x65, 0x20, 0x65, 0x74, 0x5B, 0x0, 0xF0, 0xD,
                               0x65, 0x20, 0x6D, 0x61, 0x67, 0x6E, 0x61, 0x20, 0x61, 0x6C, 0x69, 0x71, 0x75, 0x61, 0x2E,
                               0x55, 0x74, 0x20, 0x65, 0x6E, 0x69, 0x6D, 0x20, 0x61, 0x64, 0x20, 0x6D, 0x69, 0x9, 0x0,
                               0xF2, 0x1A, 0x76, 0x65, 0x6E, 0x69, 0x61, 0x6D, 0x2C, 0x20, 0x71, 0x75, 0x69, 0x73, 0x20,
                               0x6E, 0x6F, 0x73, 0x74, 0x72, 0x75, 0x64, 0x20, 0x65, 0x78, 0x65, 0x72, 0x63, 0x69, 0x74,
                               0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x75, 0x6C, 0x6C, 0x61, 0x6D, 0x63, 0x6F, 0x59, 0x0,
                               0x0, 0x25, 0x0, 0x30, 0x69, 0x73, 0x69, 0x69, 0x0, 0x1, 0x52, 0x0, 0xF2, 0x1, 0x69, 0x70,
                               0x20, 0x65, 0x78, 0x20, 0x65, 0x61, 0x20, 0x63, 0x6F, 0x6D, 0x6D, 0x6F, 0x64, 0x6F, 0xC0,
                               0x0, 0x60, 0x71, 0x75, 0x61, 0x74, 0x2E, 0x44, 0x52, 0x0, 0xA3, 0x61, 0x75, 0x74, 0x65,
                               0x20, 0x69, 0x72, 0x75, 0x72, 0x65, 0xEA, 0x0, 0xF0, 0x1, 0x69, 0x6E, 0x20, 0x72, 0x65,
                               0x70, 0x72, 0x65, 0x68, 0x65, 0x6E, 0x64, 0x65, 0x72, 0x69, 0x74, 0x11, 0x0, 0xB0, 0x76,
                               0x6F, 0x6C, 0x75, 0x70, 0x74, 0x61, 0x74, 0x65, 0x20, 0x76, 0xE8, 0x0, 0xA4, 0x20, 0x65,
                               0x73, 0x73, 0x65, 0x20, 0x63, 0x69, 0x6C, 0x6C, 0x20, 0x1, 0xD0, 0x65, 0x20, 0x65, 0x75,
                               0x20, 0x66, 0x75, 0x67, 0x69, 0x61, 0x74, 0x20, 0x6E, 0x90, 0x0, 0xF0, 0x3, 0x20, 0x70,
                               0x61, 0x72, 0x69, 0x61, 0x74, 0x75, 0x72, 0x2E, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x65,
                               0x75, 0x44, 0x1, 0xF0, 0x4, 0x6E, 0x74, 0x20, 0x6F, 0x63, 0x63, 0x61, 0x65, 0x63, 0x61,
                               0x74, 0x20, 0x63, 0x75, 0x70, 0x69, 0x64, 0x61, 0x74, 0x31, 0x0, 0xA0, 0x6F, 0x6E, 0x20,
                               0x70, 0x72, 0x6F, 0x69, 0x64, 0x65, 0x6E, 0x43, 0x1, 0x21, 0x75, 0x6E, 0x74, 0x0, 0x50,
                               0x63, 0x75, 0x6C, 0x70, 0x61, 0xF6, 0x0, 0xE0, 0x20, 0x6F, 0x66, 0x66, 0x69, 0x63, 0x69,
                               0x61, 0x20, 0x64, 0x65, 0x73, 0x65, 0x72, 0x1E, 0x0, 0x30, 0x6D, 0x6F, 0x6C, 0x86, 0x0,
                               0x10, 0x61, 0x1F, 0x1, 0xF0, 0x0, 0x69, 0x64, 0x20, 0x65, 0x73, 0x74, 0x20, 0x6C, 0x61,
                               0x62, 0x6F, 0x72, 0x75, 0x6D, 0x2E, 0x5A, 0x65, 0x72, 0x6F, 0x53, 0x69, 0x7A, 0x65, 0x4D,
                               0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x0, 0x18, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                               0x0, 0x0, 0x0, 0x53, 0x68, 0x6F, 0x72, 0x74, 0x4D, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
                               0x0, 0x18, 0x0, 0x0, 0x0, 0x19, 0x0, 0x0, 0x0, 0x2D, 0xED, 0x70, 0xB0, 0x4C, 0x6F, 0x6E,
                               0x67, 0x4D, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x0, 0x37, 0x0, 0x0, 0x0, 0xBA, 0x1, 0x0,
                               0x0, 0xAE, 0xBF, 0x69, 0xFD};

unsigned char RPAKContent[] = {0x52, 0x50, 0x41, 0x4B, 0x3, 0x0, 0x0, 0x0, 0x5B, 0xD0, 0x75, 0xCC, 0x0, 0x0, 0x0, 0x0,
                               0xEB, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x54, 0x68, 0x65, 0x20, 0x73, 0x68, 0x6F, 0x72,
                               0x74, 0x20, 0x6D, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x63, 0x6F, 0x6E, 0x74, 0x65,
                               0x6E, 0x74, 0x4C, 0x6F, 0x72, 0x65, 0x6D, 0x20, 0x69, 0x70, 0x73, 0x75, 0x6D, 0x20, 0x64,
                               0x6F, 0x6C, 0x6F, 0x72, 0x20, 0x73, 0x69, 0x74, 0x20, 0x61, 0x6D, 0x65, 0x74, 0x2C, 0x20,
                               0x63, 0x6F, 0x6E, 0x73, 0x65, 0x63, 0x74, 0x65, 0x74, 0x75, 0x72, 0x20, 0x61, 0x64, 0x69,
                               0x70, 0x69, 0x73, 0x63, 0x69, 0x6E, 0x67, 0x20, 0x65, 0x6C, 0x69, 0x74, 0x2C, 0x20, 0x73,
                               0x65, 0x64, 0x20, 0x64, 0x6F, 0x20, 0x65, 0x69, 0x75, 0x73, 0x6D, 0x6F, 0x64, 0x20, 0x74,
                               0x65, 0x6D, 0x70, 0x6F, 0x72, 0x20, 0x69, 0x6E, 0x63, 0x69, 0x64, 0x69, 0x64, 0x75, 0x6E,
                               0x74, 0x20, 0x75, 0x74, 0x20, 0x6C, 0x61, 0x62, 0x6F, 0x72, 0x65, 0x20, 0x65, 0x74, 0x20,
                               0x64, 0x6F, 0x6C, 0x6F, 0x72, 0x65, 0x20, 0x6D, 0x61, 0x67, 0x6E, 0x61, 0x20, 0x61, 0x6C,
                               0x69, 0x71, 0x75, 0x61, 0x2E, 0x55, 0x74, 0x20, 0x65, 0x6E, 0x69, 0x6D, 0x20, 0x61, 0x64,
                               0x20, 0x6D, 0x69, 0x6E, 0x69, 0x6D, 0x20, 0x76, 0x65, 0x6E, 0x69, 0x61, 0x6D, 0x2C, 0x20,
                               0x71, 0x75, 0x69, 0x73, 0x20, 0x6E, 0x6F, 0x73, 0x74, 0x72, 0x75, 0x64, 0x20, 0x65, 0x78,
                               0x65, 0x72, 0x63, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x75, 0x6C, 0x6C, 0x61,
                               0x6D, 0x63, 0x6F, 0x20, 0x6C, 0x61, 0x62, 0x6F, 0x72, 0x69, 0x73, 0x20, 0x6E, 0x69, 0x73,
                               0x69, 0x20, 0x75, 0x74, 0x20, 0x61, 0x6C, 0x69, 0x71, 0x75, 0x69, 0x70, 0x20, 0x65, 0x78,
                               0x20, 0x65, 0x61, 0x20, 0x63, 0x6F, 0x6D, 0x6D, 0x6F, 0x64, 0x6F, 0x20, 0x63, 0x6F, 0x6E,
                               0x73, 0x65, 0x71, 0x75, 0x61, 0x74, 0x2E, 0x44, 0x75, 0x69, 0x73, 0x20, 0x61, 0x75, 0x74,
                               0x65, 0x20, 0x69, 0x72, 0x75, 0x72, 0x65, 0x20, 0x64, 0x6F, 0x6C, 0x6F, 0x72, 0x20, 0x69,
                               0x6E, 0x20, 0x72, 0x65, 0x70, 0x72, 0x65, 0x68, 0x65, 0x6E, 0x64, 0x65, 0x72, 0x69, 0x74,
                               0x20, 0x69, 0x6E, 0x20, 0x76, 0x6F, 0x6C, 0x75, 0x70, 0x74, 0x61, 0x74, 0x65, 0x20, 0x76,
                               0x65, 0x6C, 0x69, 0x74, 0x20, 0x65, 0x73, 0x73, 0x65, 0x20, 0x63, 0x69, 0x6C, 0x6C, 0x75,
                               0x6D, 0x20, 0x64, 0x6F, 0x6C, 0x6F, 0x72, 0x65, 0x20, 0x65, 0x75, 0x20, 0x66, 0x75, 0x67,
                               0x69, 0x61, 0x74, 0x20, 0x6E, 0x75, 0x6C, 0x6C, 0x61, 0x20, 0x70, 0x61, 0x72, 0x69, 0x61,
                               0x74, 0x75, 0x72, 0x2E, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x65, 0x75, 0x72, 0x20, 0x73,
                               0x69, 0x6E, 0x74, 0x20, 0x6F, 0x63, 0x63, 0x61, 0x65, 0x63, 0x61, 0x74, 0x20, 0x63, 0x75,
                               0x70, 0x69, 0x64, 0x61, 0x74, 0x61, 0x74, 0x20, 0x6E, 0x6F, 0x6E, 0x20, 0x70, 0x72, 0x6F,
                               0x69, 0x64, 0x65, 0x6E, 0x74, 0x2C, 0x20, 0x73, 0x75, 0x6E, 0x74, 0x20, 0x69, 0x6E, 0x20,
                               0x63, 0x75, 0x6C, 0x70, 0x61, 0x20, 0x71, 0x75, 0x69, 0x20, 0x6F, 0x66, 0x66, 0x69, 0x63,
                               0x69, 0x61, 0x20, 0x64, 0x65, 0x73, 0x65, 0x72, 0x75, 0x6E, 0x74, 0x20, 0x6D, 0x6F, 0x6C,
                               0x6C, 0x69, 0x74, 0x20, 0x61, 0x6E, 0x69, 0x6D, 0x20, 0x69, 0x64, 0x20, 0x65, 0x73, 0x74,
                               0x20, 0x6C, 0x61, 0x62, 0x6F, 0x72, 0x75, 0x6D, 0x2E, 0x5A, 0x65, 0x72, 0x6F, 0x53, 0x69,
                               0x7A, 0x65, 0x4D, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x0, 0x18, 0x0, 0x0, 0x0, 0x0, 0x0,
                               0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x53, 0x68, 0x6F, 0x72, 0x74, 0x4D, 0x65, 0x73, 0x73, 0x61,
                               0x67, 0x65, 0x0, 0x18, 0x0, 0x0, 0x0, 0x19, 0x0, 0x0, 0x0, 0x2D, 0xED, 0x70, 0xB0, 0x4C,
                               0x6F, 0x6E, 0x67, 0x4D, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x0, 0x31, 0x0, 0x0, 0x0,
                               0xBA, 0x1, 0x0, 0x0, 0xAE, 0xBF, 0x69, 0xFD};
}

TEST_CASE("Missing PackageFile")
{
    SharedPtr<Context> context = CreateTestContext();
    PackageFile packageFile(context.Get());
    REQUIRE_FALSE(packageFile.Open("MissingFile"));
}

TEST_CASE("Empty PackageFile")
{
    SharedPtr<Context> context = CreateTestContext();

    TmpFile tmpFile(context);
    PackageBuilder builder;
    {
        SharedPtr<File> pakFile = MakeShared<File>(context.Get(), tmpFile.fileName_, FILE_WRITE);
        bool compress = GENERATE(false, true);
        EncryptionKey* key = GENERATE(static_cast<EncryptionKey*>(nullptr), &TestEncryptionKey);
        REQUIRE(builder.Create(pakFile, compress, key));
        REQUIRE(builder.Build());
    }
    PackageFile packageFile(static_cast<Context*>(context));
    REQUIRE(packageFile.Open(tmpFile.fileName_));
}

TEST_CASE("Single entry PackageFile")
{
    bool compress = GENERATE(false, true);
    EncryptionKey* key = GENERATE(nullptr, &TestEncryptionKey);
    INFO("compress: " << compress << ", key: " << key);

    SharedPtr<Context> context = CreateTestContext();

    TmpFile tmpFile(context);

    const ea::string testString = "Sample message";
    {
        SharedPtr<File> pakFile = MakeShared<File>(context.Get(), tmpFile.fileName_, FILE_WRITE);
        PackageBuilder builder;
        REQUIRE(builder.Create(pakFile, compress, key));
        REQUIRE(AppendMessage(builder, "EntryName", testString));
        REQUIRE(builder.Build());
    }
    PackageFile packageFile(context.Get());
    REQUIRE(packageFile.Open(tmpFile.fileName_));

    ea::string messageValue;
    REQUIRE(RetrieveMessage(context, &packageFile, "EntryName", &messageValue));
    REQUIRE(messageValue == testString);
}

TEST_CASE("Read UPAK")
{
    SharedPtr<Context> context = CreateTestContext();

    TmpFile tmpFile(context);
    const ea::string shortMessage = "The short message content";
    {
        SharedPtr<File> pakFile = MakeShared<File>(context.Get(), tmpFile.fileName_, FILE_WRITE);
        // Uncompressed package content.
        pakFile->WriteFileID("UPAK");
        pakFile->WriteUInt(2);
        pakFile->WriteUInt(0xB070ED2D);
        pakFile->WriteString("ShortMessage");
        pakFile->WriteUInt(0x41);
        pakFile->WriteUInt(0x19);
        pakFile->WriteUInt(0xB070ED2D);
        pakFile->WriteString("ZeroSizeMessage");
        pakFile->WriteUInt(0x5A);
        pakFile->WriteUInt(0x00);
        pakFile->WriteUInt(0x00);
        pakFile->Write(shortMessage.data(), shortMessage.size());
        pakFile->WriteUInt(0x5E);
    }
    PackageFile packageFile(context.Get());
    REQUIRE(packageFile.Open(tmpFile.fileName_));

    ea::string messageValue;
    REQUIRE(RetrieveMessage(context, &packageFile, "ShortMessage", &messageValue));
    REQUIRE(messageValue == shortMessage);
    REQUIRE(RetrieveMessage(context, &packageFile, "ZeroSizeMessage", &messageValue));
    REQUIRE(messageValue == "");
}

TEST_CASE("Read ULZ4, RLZ4 or RPAK")
{
    SharedPtr<Context> context = CreateTestContext();

    TmpFile tmpFile(context);
    const ea::string shortMessage = "The short message content";
    {
        SharedPtr<File> pakFile = MakeShared<File>(context.Get(), tmpFile.fileName_, FILE_WRITE);
        switch (GENERATE(0, 1, 2))
        {
        case 0:
            pakFile->Write(ULZ4Content, sizeof ULZ4Content);
            break;
        case 1:
            pakFile->Write(RLZ4Content, sizeof RLZ4Content);
            break;
        case 2:
            pakFile->Write(RPAKContent, sizeof RPAKContent);
            break;
        }
    }
    PackageFile packageFile(context.Get());
    REQUIRE(packageFile.Open(tmpFile.fileName_));

    ea::string messageValue;
    REQUIRE(RetrieveMessage(context, &packageFile, "ShortMessage", &messageValue));
    REQUIRE(messageValue == shortMessage);
    REQUIRE(RetrieveMessage(context, &packageFile, "ZeroSizeMessage", &messageValue));
    REQUIRE(messageValue == "");
    REQUIRE(RetrieveMessage(context, &packageFile, "LongMessage", &messageValue));
    REQUIRE(
        messageValue ==
        "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.")
    ;
}
